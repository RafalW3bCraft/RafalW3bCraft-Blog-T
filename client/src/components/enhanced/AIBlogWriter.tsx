import { useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Brain, Github, Wand2, FileText, Tags, Eye } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { audioService } from '@/lib/audioService';
import { apiRequest } from '@/lib/queryClient';

interface BlogPost {
  title: string;
  content: string;
  excerpt: string;
  tags: string[];
  isDraft: boolean;
  isAutoGenerated?: boolean;
  githubRepo?: string;
}

export function AIBlogWriter() {
  const { user, isAuthenticated } = useAuth();
  const [formData, setFormData] = useState<BlogPost>({
    title: '',
    content: '',
    excerpt: '',
    tags: [],
    isDraft: true,
    isAutoGenerated: false,
  });
  const [newTag, setNewTag] = useState('');
  const [selectedRepo, setSelectedRepo] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const featuredRepos = [
    'G3r4kiSecBot',
    'AmazonAffiliatedBot', 
    'TheCommander',
    'WhisperAiEngine',
    'OmniLanguageTutor',
  ];

  // Generate AI blog from GitHub repo
  const generateFromRepoMutation = useMutation({
    mutationFn: async (repoName: string) => {
      return apiRequest('POST', '/api/ai/generate-blog', { repoName });
    },
    onSuccess: (data: any) => {
      setFormData(prev => ({
        ...prev,
        ...data,
        isDraft: true,
        isAutoGenerated: true,
        githubRepo: selectedRepo,
      }));
      audioService.playSuccessSound();
      toast({
        title: 'AI Blog Generated',
        description: 'Review and edit the generated content before publishing',
      });
    },
    onError: (error: any) => {
      toast({
        title: 'Generation Failed',
        description: error.message || 'Failed to generate blog from repository',
        variant: 'destructive',
      });
      audioService.playErrorSound();
    },
  });

  // Save blog post
  const saveBlogMutation = useMutation({
    mutationFn: async (data: BlogPost) => {
      return apiRequest('POST', '/api/blog/posts', data);
    },
    onSuccess: () => {
      toast({
        title: 'Blog Post Saved',
        description: formData.isDraft ? 'Saved as draft' : 'Published successfully',
      });
      audioService.playSuccessSound();
      queryClient.invalidateQueries({ queryKey: ['/api/blog/posts'] });
      // Reset form
      setFormData({
        title: '',
        content: '',
        excerpt: '',
        tags: [],
        isDraft: true,
        isAutoGenerated: false,
      });
    },
    onError: (error: any) => {
      toast({
        title: 'Save Failed',
        description: error.message || 'Failed to save blog post',
        variant: 'destructive',
      });
      audioService.playErrorSound();
    },
  });

  const handleGenerateFromRepo = () => {
    if (!selectedRepo) {
      toast({
        title: 'Select Repository',
        description: 'Please select a GitHub repository to generate from',
        variant: 'destructive',
      });
      return;
    }
    generateFromRepoMutation.mutate(selectedRepo);
  };

  const addTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  const handleSave = (isDraft: boolean) => {
    if (!formData.title.trim() || !formData.content.trim()) {
      toast({
        title: 'Required Fields',
        description: 'Title and content are required',
        variant: 'destructive',
      });
      return;
    }

    saveBlogMutation.mutate({
      ...formData,
      isDraft,
    });
  };

  if (!isAuthenticated || (user as any)?.role !== 'admin') {
    return (
      <Card className="bg-zinc-900/90 border-cyan-500/30">
        <CardHeader>
          <CardTitle className="text-cyan-400 flex items-center gap-2">
            <Brain className="h-5 w-5" />
            AI Blog Writer
          </CardTitle>
        </CardHeader>
        <CardContent className="text-center py-8">
          <p className="text-zinc-400">Admin access required</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* AI Generation Section */}
      <Card className="bg-zinc-900/90 border-cyan-500/30">
        <CardHeader>
          <CardTitle className="text-cyan-400 flex items-center gap-2">
            <Brain className="h-5 w-5" />
            AI Blog Generator
            <Badge variant="outline" className="border-purple-500/50 text-purple-400">
              Beta
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-4">
            <Select value={selectedRepo} onValueChange={setSelectedRepo}>
              <SelectTrigger className="flex-1 bg-zinc-800 border-zinc-600 text-white">
                <SelectValue placeholder="Select GitHub repository..." />
              </SelectTrigger>
              <SelectContent className="bg-zinc-800 border-zinc-600">
                {featuredRepos.map((repo) => (
                  <SelectItem key={repo} value={repo} className="text-white hover:bg-zinc-700">
                    <div className="flex items-center gap-2">
                      <Github className="h-4 w-4" />
                      {repo}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Button
              onClick={handleGenerateFromRepo}
              disabled={!selectedRepo || generateFromRepoMutation.isPending}
              className="bg-purple-600 hover:bg-purple-700 text-white"
            >
              <Wand2 className="h-4 w-4 mr-2" />
              {generateFromRepoMutation.isPending ? 'Generating...' : 'Generate'}
            </Button>
          </div>
          <p className="text-xs text-zinc-400">
            AI will analyze the repository's README, commits, and code to generate a comprehensive technical blog post.
          </p>
        </CardContent>
      </Card>

      {/* Blog Editor Section */}
      <Card className="bg-zinc-900/90 border-cyan-500/30">
        <CardHeader>
          <CardTitle className="text-cyan-400 flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Blog Editor
            {formData.isAutoGenerated && (
              <Badge variant="outline" className="border-green-500/50 text-green-400">
                AI Generated
              </Badge>
            )}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Title */}
          <div>
            <label className="text-sm font-medium text-zinc-300 mb-2 block">Title</label>
            <Input
              value={formData.title}
              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
              placeholder="Enter blog post title..."
              className="bg-zinc-800 border-zinc-600 text-white"
            />
          </div>

          {/* Excerpt */}
          <div>
            <label className="text-sm font-medium text-zinc-300 mb-2 block">Excerpt</label>
            <Textarea
              value={formData.excerpt}
              onChange={(e) => setFormData(prev => ({ ...prev, excerpt: e.target.value }))}
              placeholder="Brief description of the blog post..."
              className="bg-zinc-800 border-zinc-600 text-white h-20 resize-none"
            />
          </div>

          {/* Tags */}
          <div>
            <label className="text-sm font-medium text-zinc-300 mb-2 block flex items-center gap-2">
              <Tags className="h-4 w-4" />
              Tags
            </label>
            <div className="flex gap-2 mb-2">
              <Input
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addTag()}
                placeholder="Add a tag..."
                className="flex-1 bg-zinc-800 border-zinc-600 text-white"
              />
              <Button onClick={addTag} variant="outline" className="border-cyan-500/50 text-cyan-400">
                Add
              </Button>
            </div>
            <div className="flex flex-wrap gap-2">
              {formData.tags.map((tag) => (
                <Badge
                  key={tag}
                  variant="outline"
                  className="border-cyan-500/50 text-cyan-400 cursor-pointer hover:bg-cyan-500/20"
                  onClick={() => removeTag(tag)}
                >
                  {tag} Ã—
                </Badge>
              ))}
            </div>
          </div>

          {/* Content */}
          <div>
            <label className="text-sm font-medium text-zinc-300 mb-2 block">Content (Markdown)</label>
            <Textarea
              value={formData.content}
              onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}
              placeholder="Write your blog content in Markdown..."
              className="bg-zinc-800 border-zinc-600 text-white h-64 resize-none font-mono text-sm"
            />
          </div>

          {/* Actions */}
          <div className="flex gap-4 pt-4">
            <Button
              onClick={() => handleSave(true)}
              disabled={saveBlogMutation.isPending}
              variant="outline"
              className="border-zinc-600 text-zinc-300 hover:bg-zinc-700"
            >
              <Eye className="h-4 w-4 mr-2" />
              Save Draft
            </Button>
            <Button
              onClick={() => handleSave(false)}
              disabled={saveBlogMutation.isPending}
              className="bg-cyan-600 hover:bg-cyan-700 text-white"
            >
              <FileText className="h-4 w-4 mr-2" />
              {saveBlogMutation.isPending ? 'Publishing...' : 'Publish'}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export default AIBlogWriter;